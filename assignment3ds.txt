1)

class Node
{
	int data;
	Node next;
	Node head=null;
	
	public Node()
	{
		data=0;
	}	
	
	public Node(int data)
	{
		this.data=data;
		this.next=null;
	}
	
	public Node add(int data)
	{
		Node l=new Node(data);
		Node temp=head;
		
		if(head==null)
		{
			head=l;
		}
		else
		{
			while(temp.next!=null)
			{
				temp=temp.next;
			}
			temp.next=l;
		}
		return head;
	}
	
	public Node swap(Node head,int pos1,int pos2)
	{
		Node temp=head;
		Node temp1=head;
		Node prev1=head;
		Node prev2=head;
		Node first=null;
		Node second=null;
		Node next1=null;
		Node next2=null;
		int i=0;
		int j=0;
		
		while(temp!=null && i < pos1-1)
		{
			temp=temp.next;			
			i++;
			//System.out.println(i);
		}		
			if(temp.next!=null)
			{
				prev1=temp;
				first=temp.next;
				next1=first.next;
			}
			
		
		while(temp1!=null && j<pos2-1)
		{
			temp1=temp1.next;
			j++;
			//System.out.println(j);
				
		}	
		if(temp1.next!=null)
		{
			prev2=temp1;
			second=temp1.next;
			next2=second.next;
		}
			
			prev1.next=second;
			second.next=next1;
			next1.next=first;
			first.next=next2;
			
		
		return head;
	}

	
	
	
	public void print(Node head)
	{	
		Node temp=head;
		for(Node i=temp;i!=null;i=i.next)
		{
			System.out.print(i.data + " ");
		}
	}
}



class LList2
{
	public static void main(String[] args)
	{
		Node p=new Node();
		Node head=p.add(1);
		head=p.add(2);
		head=p.add(3);
		head=p.add(3);
		head=p.add(3);
		head=p.add(4);
		head=p.add(5);
		p.print(head);
		System.out.println();
		head=p.swap(head,1,3);
		p.print(head);
		
		
	}
} 
 --------------------------------------------------------------------------------------------------------------------
2)

import java.util.*;
class node
{
	private int data;
	private node next;
	public node insert(node head,int data)
	{
		node temp =new node();
		temp.data=data;
		temp.next=null;
		if(head==null)
		{
			head=temp;
		}
		else
		{
			node ptr=head;
			while(ptr.next!=null)
			{
				ptr=ptr.next;
			}
			ptr.next=temp;
		}
		return head;
	}
	public void display(node head)
	{
		node ptr=head;
		while(ptr.next!=null)
		{
			System.out.print(ptr.data+" ");
			ptr=ptr.next;
		}
		System.out.println(ptr.data);
	}
	public node remDup(node head)
	{
		node ptr=head;
		node pre=head;
		int temp=ptr.data;
		while(ptr.next!=null)
		{
			
			if(ptr.next.data==temp)
			{
				pre=ptr;
				ptr.next=ptr.next.next;
			}
			else
			{
				temp=ptr.next.data;
				pre=ptr;
				ptr=ptr.next;
			}
		}
		return head;
	}
}
public class removeduplicates {

	public static void main(String[] args) {
	  Scanner scan = new Scanner(System.in);
      int size= scan.nextInt();
      node head=null;
      node l1 = new node();
      for(int i=0;i<size;i++)
      {
    	  int num=scan.nextInt();
    	  head=l1.insert(head, num);
      }
      l1.display(head);
      l1.remDup(head);
      l1.display(head);
	}

}
------------------------------------------------------------------------------------------------------------------
3)

import java.util.*;
class Nodes
{
	private int data;
	private Nodes next;
	public Nodes insert(Nodes head,int data1)
	{
		Nodes temp = new Nodes();
		temp.data=data1;
		temp.next=null;
		if(head==null)
		{
			head=temp;
		}
		else
		{
			Nodes ptr=head;
			while(ptr.next!=null)
			{
				ptr=ptr.next;
			}
			ptr.next=temp;
		}
		return head;
	}
	public void display(Nodes head)
	{
		Nodes ptr=head;
		while(ptr.next!=null)
		{
			System.out.print(ptr.data+" ");
			ptr=ptr.next;
		}
		System.out.println(ptr.data);
	}
	public Nodes merging(Nodes head,Nodes head1)
	{
		Nodes ptr=head;
		while(ptr.next!=null)
		{
			ptr=ptr.next;
		}
		ptr.next=head1;
		Nodes ptr1=head;
		Nodes pre=ptr1;
		while(ptr1.next!=null)
		{
			pre=ptr1;
			while(pre!=null)
			{
				if(ptr1.data>pre.data)
				{
					int temp=ptr1.data;
					ptr1.data=pre.data;
					pre.data=temp;
					pre=pre.next;
				}
				pre=pre.next;
			}
			ptr1=ptr1.next;
		}
		return head;
	}
	}
public class mergetwolist {

	public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    int size=scan.nextInt();
    Nodes head=null;
    Nodes l1=new Nodes();
    for(int i=0;i<size;i++)
    {
    	int num=scan.nextInt();
    	head=l1.insert(head, num);
    }
    l1.display(head);
    Nodes head1=null;
    Nodes l2=new Nodes();
    for(int i=0;i<size;i++)
    {
    	int num=scan.nextInt();
    	head1=l2.insert(head1, num);
    }
    l2.display(head1);
    head=l1.merging(head, head1);
    l1.display(head);
	}

}
---------------------------------------------------------------------------------------------------------------
4)

import java.util.Scanner;

 class Node<T>
{
    T d;
    Node<T> next;

    Node(T d)
    {
        this.d=d;
        this.next=null;
    }
}
class palindrome{
    public static Node<Integer> get(Node<Integer> head,int a)
    {
                    Node<Integer> n=new Node<>(a);
            Node<Integer> temp=null;
            Node<Integer> p=null;
        if(head==null)
        {
            head=n;
        }
        else
        {
            temp=head;
            while(temp.nex=t!=null)
            {
                temp=temp.next;
            }
temp.next=n;
           
        }
        p=head;
        return p;
        }
public static void palindrome(Node<Integer> head)
  {     int c=0;
          Node<Integer> temp=head;
          Node<Integer> temp1=null;
          Node<Integer> head1=null;

            Node<Integer> fast=head.next;
            Node<Integer> slow=head;
            
        /*  while(temp!=null)
            {
              temp=temp.next;
              c++;
            }
            */
            while(fast!=null && fast.next!=null)
            {
              slow=slow.next;
              fast=fast.next.next;
              c++;
            }


int h=0;
h=c/2;
System.out.println(c);
int i,f=0;

            head1=rev(slow);
            
      temp1=head1;
               for(i=0;i<h;i++)
               {
           temp=temp.next;     
           temp1=temp1.next;
           if(temp.d!=temp1.d)
           {
      f=1;
           }
               }
               if(f==1)
               {
                    System.out.println("not palindrome");
               }
               else
             {
               System.out.println("it is a palindrome");
             }

  }
    
    public static Node<Integer> rev(Node<Integer> head)
    {
        Node<Integer> forward=null;
           Node<Integer> current=head;
            Node<Integer> prev=null;

            while(current!=null)
            {
                forward=current.next;
                current.next=prev;
                prev=current;
                current=forward;
                          }
                          head=prev;
                          return head;
    }
    public static void disp(Node<Integer> head)
    {
      Node<Integer> p=null;

        while(head!=null)
        {	System.out.print(head.d+" ");
			head = head.next;
		}
		System.out.println("null");
		
		System.out.println(head);
    }


public static Node<Integer> replace(Node<Integer> head,int a,int b)
    {
        
        int c=0;
        int c1=0;
       Node<Integer> n=new Node<>(0);
    Node<Integer> temp=head;
     Node<Integer>  forward=null;
      Node<Integer> prev=null;
       Node<Integer> temp1=head;
     Node<Integer>  forward1=null;
      Node<Integer> prev1=null;
        Node<Integer> temp2=null;
         Node<Integer> temp3=head;
   /*     if(head.next.d==a)
        {
          while(temp!=null)
          {
 if(temp.d=b)
 {
 }
          }
        }
        */
      while(temp.next!=null)
      {
c++;
forward=temp.next;
prev=temp;
temp=temp.next;

        if(temp.d==a)
        {
            break;
        }
      }

while(temp.next!=null)
{
    c1++;
forward1=temp.next;
prev1=temp;
temp=temp.next;

        if(temp.d==b)
        {
            break;
        }
      }
      n.d=prev.next.d;
      prev.next.d=prev1.next.d;
      prev1.next.d=n.d;
      temp2=forward;
forward=forward1;
forward1=temp2;
return head;
}

    
public static void main(String args[])
{
    Scanner s=new Scanner(System.in);
    Node<Integer> head=null;
    Node<Integer> head1=null;
    Node<Integer> t=null;
    int a=s.nextInt();
    for(int i=0;i<a;i++)
    {
        int p=s.nextInt();
        head=get(head,p);
      
    }
  
 
//head1=checkpalindrome(head1,head);
  head=rev(head);
  palindrome(head);
   // t=rev(head);
  //  head=replace(head,4,9);

  //  disp(head1);

}
}
--------------------------------------------------------------------------------------------------------------------------------------------
5)

import java.util.Scanner;

 class Node<T>
{
    T d;
    Node<T> next;

    Node(T d)
    {
        this.d=d;
        this.next=null;
    }
}
public class printreverse{
    public static Node<Integer> get(Node<Integer> head,int a)
    {
                    Node<Integer> n=new Node<>(a);
            Node<Integer> temp=null;
            Node<Integer> p=null;
        if(head==null)
        {
            head=n;
        }
        else
        {
            temp=head;
            while(temp.next!=null)
            {
                temp=temp.next;
            }
temp.next=n;
           
        }
        p=head;
        return p;
        }

    public static Node<Integer> rev(Node<Integer> head)
    {
        Node<Integer> forward=null;
           Node<Integer> current=head;
            Node<Integer> prev=null;

            while(current!=null)
            {
                forward=current.next;
                current.next=prev;
                prev=current;
                current=forward;
                          }
                          head=prev;
                          return head;
    }
    public static void disp(Node<Integer> head)
    {
      Node<Integer> p=null;

        while(head!=null)
        { System.out.print(head.d+"->");
      head = head.next;
    }
      System.out.print("null");


    }



    
public static void main(String args[])
{
    Scanner s=new Scanner(System.in);
    Node<Integer> head=null;
    Node<Integer> head1=null;
    Node<Integer> t=null;
    int a=s.nextInt();
    for(int i=0;i<a;i++)
    {
        int p=s.nextInt();
        head=get(head,p);
      
    }
  
 

  head=rev(head);


 disp(head);

}
}
-------------------------------------------------------------------------------------------------------------------------------------
6)

import java.util.*;
class Nodes
{
	private int data;
	private Nodes next;
	public Nodes insert(Nodes head,int data1)
	{
		Nodes temp = new Nodes();
		temp.data=data1;
		temp.next=null;
		if(head==null)
		{
			head=temp;
		}
		else
		{
			Nodes ptr=head;
			while(ptr.next!=null)
			{
				ptr=ptr.next;
			}
			ptr.next=temp;
		}
		return head;
	}
	public void display(Nodes head)
	{
		Nodes ptr=head;
		while(ptr.next!=null)
		{
			System.out.print(ptr.data+" ");
			ptr=ptr.next;
		}
		System.out.println(ptr.data);
	}
	public Nodes arrange(Nodes head,Nodes newhead)
	{
		Nodes ptr= head;
		Nodes ndHead=null;
		Nodes b=null;
		Nodes a=null;
		while(ptr!=null)
		{
			Nodes temp = new Nodes();
			if(ptr.data%2!=0)
			{
				temp.data=ptr.data;
				temp.next=null;
				if(newhead==null)
				{
					newhead=temp;
				}
				else
				{
					Nodes pre=newhead;
					while(pre.next!=null)
					{
						pre=pre.next;
					}
					pre.next=temp;
					a=temp;
				}
			}
			else
			{
				temp.data=ptr.data;
				temp.next=null;
				if(ndHead==null)
				{
					ndHead=temp;
				}
				else
				{
					Nodes prt=ndHead;
					while(prt.next!=null)
					{
						prt=prt.next;
					}
					prt.next=temp;
				}
			}
			ptr=ptr.next;
		}
		a.next=ndHead;
		return newhead;
	}
		}
public class arroddeven {

	public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    int size=scan.nextInt();
    Nodes head=null;
    Nodes l1=new Nodes();
    for(int i=0;i<size;i++)
    {
    	int num=scan.nextInt();
    	head=l1.insert(head, num);
    }
    l1.display(head);
    Nodes newhead=null;
    head=l1.arrange(head, newhead);
    l1.display(head);
	}
}