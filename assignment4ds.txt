1)

import java.util.*;
class Node
{
    Node next;
    int data;
    Node(int data)
    {
        this.data=data;
        this.next=null;
    }
}
class Stack
{
    private Node head;
    private int c;
    public void push(int d)
    {
        Node n=new Node(d);
        if(head==null)
        {
            head=n;
        }
        else
        {
            n.next=head;
            head=n;
        }
        c++;
    }
    public int pop()
    {
        if(isEmpty()==true)
        {
            System.out.println("Stack is Empty");
        }
            int val=head.data;
            head=head.next;
        c--;
        return val;
    }
    public int top()
    {
        return head.data;
    }
    public int size()
    {
        return c;
    }
    public boolean isEmpty()
    {
        if(head==null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void printStack()
    {
        Node t=head;
        while(t!=null)
        {
            System.out.print(t.data+" ");
            t=t.next;
        }
    }
}
    class Queue
{
    private Node head;
    private Node tail;
    private int c;
    public void in(int d)
    {
        Node n=new Node(d);
        if(head==null)
        {
            head=tail=n;
        }
        else
        {
            tail.next=n;
            tail=n;
        }
        c++;
    }
    public int out()
    {
        if(isEmpty()==true)
        {
            System.out.println("Queue is Empty");
        }
          int val=head.data;
            head=head.next;
            c--;
        return val;
    }
    public int top()
    {
        return head.data;
    }
    public int size()
    {
        return c;
    }
    public boolean isEmpty()
    {
        if(head==null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void printQueue()
    {
        Node t=head;
        while(t!=null)
        {
            System.out.print(t.data+" ");
            t=t.next;
        }
    }
}
public class StackandQueue
{
    public static void main(String a[])
    {
        Stack st=new Stack();
        Queue q = new Queue();
        st.push(1);
        st.push(2);
        st.push(3);
        st.push(4);
        st.push(5);
        q.in(10);
        q.in(13);
        q.in(17);
        q.in(18);
        q.in(1);
        q.in(100);
        System.out.println("Stack");
        System.out.println("Size of stack without poping: "+st.size());
        System.out.println("Element popped form top: "+st.pop());
        System.out.println("Current size of stack : "+st.size());
        st.push(20);
        System.out.println("Last Element Entered : "+st.top());
        System.out.println("Elements Present in Stack : ");
        st.printStack();



        System.out.println("Queue");
        System.out.println("Size of Queue : "+q.size());
        System.out.println("Elements Present in Queue : ");
        q.printQueue();
        System.out.println();
        System.out.println("Element Removed : "+q.out()+" ");
        System.out.println("Element Removed : "+q.out()+" ");
        System.out.println("Size of Queue : "+q.size()); 
        System.out.println("Top Element of queue : "+q.top()); 
        System.out.println("Elements Present in Queue : ");
        q.printQueue();
    }
}
---------------------------------------------------------------------------------------------------------------------------------
2)
import java.util.*;
import java.util.Stack;
public class using2queue
{
	public static void main(String[] args) {
		Stack s=new Stack();
		Stack s1=new Stack();
          s.push(10);
          s.push(20);
          s.push(30);
          s.push(40);
          s1.push(s.pop());
             s1.push(s.pop());
                s1.push(s.pop());
                   s1.push(s.pop());

        System.out.println(s1.pop());
        System.out.println(s1.pop());
        System.out.println(s1.pop());
        System.out.println(s1.pop());
	}
}
---------------------------------------------------------------------------------------------------------------------------------
3)
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data=data;
        this.next=null;
    }
}
public class stackusingqueues
{
    class Q
    {
     private Node head;
     private Node tail;
     private int v;
     private int c;
     public void enQ(int d)
     {
         Node n=new Node(d);
         if(head==null)
         {
             head=tail=n;
         }
         else
         {
             tail.next=n;
             tail=n;
         }
         c++;
     }
     public int deQ()
     {
         if(isEmpty()==true)
         {
             System.out.print("Queue is Empty");
         }
         else
         {
             v=head.data;
             head=head.next;
         }
         c--;
         return v;
     }
     public boolean isEmpty()
     {
         if(head==null)
             return true;
             return false;
     }
     public int size()
     {
         return c;
     }
    }
     Q q1 =new Q();
     Q q2 = new Q();
    public void push(int x)
    {
        q1.enQ(x);
    }
    public int pop()
    {
        while(q1.size()!=1)
        {
            q2.enQ(q1.deQ());
        }
        int t=q1.deQ();
        Q q=q1;
        q1=q2;
        q2=q;
        return t;
}
    public static void main(String g[])
    {
       stackusingqueues s=new stackusingqueues();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
        System.out.println("Displayed Stack:");
        System.out.print(s.pop()+" ");
        System.out.print(s.pop()+" ");
        System.out.print(s.pop()+" ");
        System.out.print(s.pop()+" ");
        }
}
--------------------------------------------------------------------------------------------------------------------------------
4)
import java.util.*;
class StackEmptyException extends Exception
{
    StackEmptyException(String str)
    {
        super(str);
    }
}
class Node
{
    Node next;
    int data;
    Node(int data)
    {
        this.data=data;
        this.next=null;
    }
}
public class o1minstack {
    private int minVal=10000;
    private Node head;
    public void push(int d)
    {
        Node n=new Node(d);
        if(n.data<minVal)
           minVal=n.data;
        if(head==null)
        {
            head=n;
        }
        else
        {
            n.next=head;
            head=n;
        }
    }
    public int pop()throws StackEmptyException
    {
        int val;
        if(isEmpty()==true)
        {
            throw new StackEmptyException("Stack is Empty");
        }
        else
        {
            val=head.data;
            head=head.next;
        }
        return val;
    }
    public boolean isEmpty()
    {
        if(head==null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void print()
    {
        Node t=head;
        while(t!=null)
        {
            System.out.print(t.data+" ");
            t=t.next;
        }
    }
    public static void main(String a[])throws StackEmptyException
    {
       o1minstack st=new o1minstack();
        st.push(12);
        st.push(23);
        st.push(3);
        st.push(40);
        st.push(5);
        st.print();
        System.out.println();
        System.out.println("Minimum Element : "+st.minVal);
    }
}